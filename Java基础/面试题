面试题：overloading与overriding的区别？
overloading:方法的重载，发生在同一个类中，方法名相同，参数列表不用，返回值无关。
overriding：方法的重写，发生在子父类中，方法名相同，参数列表相同，返回值相同，子类的访问修饰符要大于或等于父类的访问修饰符，子类的异常声明必须小于或等于父类的异常声明，如果方法被private，static，final修饰，那么不能被重写

局部内部类访问局部变量必须用final修饰，为什么？
在调用这个方法时，局部变量如果没有用final修饰，他的生命周期和方法的生命周期是一样的，当方法被调用时会入栈，方法结束后即弹栈，这个局部变量也会消失，那么如果局部内部类对象还没有马上消失想用这个局部变量，显然已无法使用了，如果用final修饰会在类加载的时候进入常量池，即使方法弹栈，常量池的常量还在，也就可以继续使用了。
(注意:在jdk1.8中取消了在局部内部类中使用的变量必须显示的使用final修饰，编译器默认会为这个变量加上final)

/**
//1
  Integer x1 = new Integer(10);
  Integer x2 = new Integer(10);
  System.out.println(x1==x2);//false
  System.out.println(x1.equals(x2));//true
//2
  Integer x3 = new Integer(128);
  Integer x4 = new Integer(128);
  System.out.println(x3==x4);//false
  System.out.println(x3.equals(x4));//true
//3
此写法和1对比，1是new一个对象，但是3是赋值，会直接存放在常量池里面(相当于缓存)，当x5为10的时候x6也为10，x5是否=x6会从常量池里面找，所以x5==x6
  Integer x5 = 10;
  Integer x6 = 10;
  System.out.println(x5==x6);//true
  System.out.println(x5.equals(x6));//true
//4
此写法和3大同小异，因为这种赋值的写法只适用于一个字节(0~127)，如果是128那就不是存放在常量池里面，所以不一样
  Integer x7 = 128;
  Integer x8 = 128;
  System.out.println(x7==x8);//false
  System.out.println(x7.equals(x8));//true
*/

访问修饰符
访问修饰符  同一个类  同包  不同包的子类  不同包的非子类
public        √       √       √           √
protected     √       √       √
默认           √       √
private        √

经典面试题-final，finally，finalize的区别：
1.final为关键字，final定义基本类型变量时，要求变量初始化必须在声明时或者构造函数中，不能用于其它地方。该关键字定义的常量，除了初始化阶段，不能更改常量的值； final定义对象的引用，该引用的初始化与定义常量时的要求一致；该关键字定义的对象内容可以改变，但是引用指向的地址不能改变；final修饰类时无法被其他任何类继承。
2.finalize()方法在Object中进行了定义，用于在对象“消失”时，由JVM进行调用用于对对象进行垃圾回收。
3.finally为区块标志，用于try语句中，表示必须运行的区块部分。

Exception 与 RuntimeException
Exception:受检异常，再编程期检查，在调用抛出这个异常的方法时，必须显示的使用try...catch...
RuntimeException:非受检异常，在运行期检查，在调用抛出这个异常的方法时，可以不用显示的使用try...catch...
在使用自定义异常时，根据实际的业务要求，来决定使用哪个作为父类

以下代码创建了几个对象？2个
原因：("粪粪")会先在堆内存中的常量池里面创建一个对象，然后因为用了new关键字，所以会在常量池以外又申请了一片新的内存空间，存放的值也是"粪粪"
String s2 = new String("粪粪");

Vector与ArrayList的区别？
 /**
	 * Vector
	 * 1.实现原理，采用动态对象数组实现，默认构造方法创建了一个大小为10的对象数组
	 * 2.扩充算法：当增量为0时，扩充为原来大小的2倍，当增量大于0时，扩充为原来大小+增量
	 * 3.不适合进行删除或插入操作
	 * 4.为了防止数组动态扩充次数过多，建议创建Vector时，给定初始容量
	 * 5.线程安全，适合在多线程访问时使用，在单线程下使用效率较低
	 */
  /**
	 * ArrayList
	 * 1.实现原理，采用动态对象数组实现，默认构造方法创建了一个空数组
	 * 2.第一次添加元素，扩展容量为10，之后的扩充算法：原来数组大小+原来数组的一半
	 * 3.不适合进行删除或插入操作
	 * 4.为了防止数组动态扩充次数过多，建议创建ArrayList时，给定初始容量
	 * 5.多线程中线程不安全，适合在单线程访问时使用，效率较高
	 * JDK1.2开始
	 * @param args
	 */
  
sleep 与 wait的区别？
sleep：让线程进入休眠状态，让出CPU的时间片，不释放对象监视器的所有权(对象锁)
wait：让线程进入等待状态，让出CPU的时间片，并释放对象监视器的所有权，等待其他线程通过notify方法来唤醒

