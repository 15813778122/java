package com.vince;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;
import java.util.function.Function;

/**
 * 集合的输出(迭代)
 * @author HP
 *
 */

public class IteratorDemo {
	
	// 表示接受一个参数并产生结构的函数
	private static void functionTest() {
		String s = strToUpp("qf_vince",(str)->str.toUpperCase());
		System.out.println(s);
	}
	
	public static String strToUpp(String str,Function<String, String> f) {
		return f.apply(str);
	}
	
	/**
	 * JDK1.8新的迭代方法
	 */
	private static void foreach() {
		List<String> list = new ArrayList<>();
		list.add("tom");
		list.add("tom1");
		list.add("tom2");
		list.add("tom3");
		
		list.forEach(s->System.out.println(s));
		//list.forEach(System.out::println);
	}
	
	private static void enumeration() {
		Vector<String> vs = new Vector<>();
		vs.add("tom");
		vs.add("tom1");
		vs.add("tom2");
		vs.add("tom3");
		
		Enumeration<String> es = vs.elements();
		while(es.hasMoreElements()) {
			System.out.println(es.nextElement());
		}
	}
	
	//foreach(1.5后)
	private static void foreach(Collection<Cat> c) {
		for(Cat cat:c) {
			System.out.println(cat);
		}
	}
	
	// iterator(1.5之前统一的迭代集合方式)
	private static void iterator(Collection<Cat> c) {
		Iterator<Cat> iter = c.iterator();
		while(iter.hasNext()) {
			System.out.println(iter.next());
		}
	}

	public static void main(String[] args) {
		List<Cat> list = new ArrayList<>();
		Cat c1 = new Cat("miaomiao",5,1);
		Cat c2 = new Cat("miaomiao1",4,1);
		Cat c3 = new Cat("miaomiao2",6,1);
		Cat c4 = new Cat("miaomiao3",5,1);
		list.add(c1);
		list.add(c2);
		list.add(c3);
		list.add(c4);
		iterator(list);
		foreach(list);
	}

}
